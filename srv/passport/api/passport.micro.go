// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: microx/srv/passport/api/passport.proto

/*
Package go_micro_srv_passport is a generated protocol buffer package.

It is generated from these files:
	microx/srv/passport/api/passport.proto

It has these top-level messages:
	TokenInfo
	Request
	Response
	SmsLoginRequest
	SmsLoginResponse
	LoginRequest
	LoginResponse
	OAuthLoginRequest
	OAuthLoginResponse
	TokenRequest
	TokenResponse
	SetPwdRequest
	SetPwdResponse
*/
package go_micro_srv_passport

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Passport service

type PassportService interface {
	Sms(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	SmsLogin(ctx context.Context, in *SmsLoginRequest, opts ...client.CallOption) (*SmsLoginResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...client.CallOption) (*OAuthLoginResponse, error)
	ValidateToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error)
	SetPwd(ctx context.Context, in *SetPwdRequest, opts ...client.CallOption) (*SetPwdResponse, error)
}

type passportService struct {
	c    client.Client
	name string
}

func NewPassportService(name string, c client.Client) PassportService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.passport"
	}
	return &passportService{
		c:    c,
		name: name,
	}
}

func (c *passportService) Sms(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Passport.Sms", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) SmsLogin(ctx context.Context, in *SmsLoginRequest, opts ...client.CallOption) (*SmsLoginResponse, error) {
	req := c.c.NewRequest(c.name, "Passport.SmsLogin", in)
	out := new(SmsLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) Login(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "Passport.Login", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...client.CallOption) (*OAuthLoginResponse, error) {
	req := c.c.NewRequest(c.name, "Passport.OAuthLogin", in)
	out := new(OAuthLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) ValidateToken(ctx context.Context, in *TokenRequest, opts ...client.CallOption) (*TokenResponse, error) {
	req := c.c.NewRequest(c.name, "Passport.ValidateToken", in)
	out := new(TokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passportService) SetPwd(ctx context.Context, in *SetPwdRequest, opts ...client.CallOption) (*SetPwdResponse, error) {
	req := c.c.NewRequest(c.name, "Passport.SetPwd", in)
	out := new(SetPwdResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Passport service

type PassportHandler interface {
	Sms(context.Context, *Request, *Response) error
	SmsLogin(context.Context, *SmsLoginRequest, *SmsLoginResponse) error
	Login(context.Context, *LoginRequest, *LoginResponse) error
	OAuthLogin(context.Context, *OAuthLoginRequest, *OAuthLoginResponse) error
	ValidateToken(context.Context, *TokenRequest, *TokenResponse) error
	SetPwd(context.Context, *SetPwdRequest, *SetPwdResponse) error
}

func RegisterPassportHandler(s server.Server, hdlr PassportHandler, opts ...server.HandlerOption) error {
	type passport interface {
		Sms(ctx context.Context, in *Request, out *Response) error
		SmsLogin(ctx context.Context, in *SmsLoginRequest, out *SmsLoginResponse) error
		Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		OAuthLogin(ctx context.Context, in *OAuthLoginRequest, out *OAuthLoginResponse) error
		ValidateToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error
		SetPwd(ctx context.Context, in *SetPwdRequest, out *SetPwdResponse) error
	}
	type Passport struct {
		passport
	}
	h := &passportHandler{hdlr}
	return s.Handle(s.NewHandler(&Passport{h}, opts...))
}

type passportHandler struct {
	PassportHandler
}

func (h *passportHandler) Sms(ctx context.Context, in *Request, out *Response) error {
	return h.PassportHandler.Sms(ctx, in, out)
}

func (h *passportHandler) SmsLogin(ctx context.Context, in *SmsLoginRequest, out *SmsLoginResponse) error {
	return h.PassportHandler.SmsLogin(ctx, in, out)
}

func (h *passportHandler) Login(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.PassportHandler.Login(ctx, in, out)
}

func (h *passportHandler) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, out *OAuthLoginResponse) error {
	return h.PassportHandler.OAuthLogin(ctx, in, out)
}

func (h *passportHandler) ValidateToken(ctx context.Context, in *TokenRequest, out *TokenResponse) error {
	return h.PassportHandler.ValidateToken(ctx, in, out)
}

func (h *passportHandler) SetPwd(ctx context.Context, in *SetPwdRequest, out *SetPwdResponse) error {
	return h.PassportHandler.SetPwd(ctx, in, out)
}
